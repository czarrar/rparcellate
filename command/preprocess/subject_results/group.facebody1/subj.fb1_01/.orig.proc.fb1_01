#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Thu Aug  7 18:04:36 2014"
echo "(version 3.42, April 9, 2013)"

# execute via : 
#   tcsh -xef proc.fb1_01 |& tee output.proc.fb1_01

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 1 Apr 2013
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 1 Apr 2013)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = fb1_01
endif

# assign output directory name
set output_dir = $subj.results

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 4`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy stim files into stimulus directory
cp /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Body_run01.1D   \
    /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Body_run02.1D  \
    /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Body_run03.1D  \
    /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Body_run04.1D  \
    /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Face_run01.1D  \
    /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Face_run02.1D  \
    /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Face_run03.1D  \
    /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Face_run04.1D  \
    /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_House_run01.1D \
    /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_House_run02.1D \
    /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_House_run03.1D \
    /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_House_run04.1D \
    $output_dir/stimuli

# copy anatomy to results dir
3dcopy /mnt/nfs/psych/facebody01/data/nifti/tb6859/tb6859_highres.nii.gz \
    $output_dir/tb6859_highres

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir, while
# removing the first 0 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat                              \
    /mnt/nfs/psych/facebody01/data/nifti/tb6859/tb6859_FaceBody01_run01.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat                              \
    /mnt/nfs/psych/facebody01/data/nifti/tb6859/tb6859_FaceBody01_run02.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r03.tcat                              \
    /mnt/nfs/psych/facebody01/data/nifti/tb6859/tb6859_FaceBody01_run03.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r04.tcat                              \
    /mnt/nfs/psych/facebody01/data/nifti/tb6859/tb6859_FaceBody01_run04.nii.gz'[0..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 147 147 147 147 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 2 -legendre                     \
                pb00.$subj.r$run.tcat+orig > outcount.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# ================================= align ==================================
# for e2a: compute anat alignment transformation to EPI registration base
# (new anat will be intermediate, stripped, tb6859_highres_ns+orig)
align_epi_anat.py -anat2epi -anat tb6859_highres+orig \
       -save_skullstrip -suffix _al_junk              \
       -epi pb00.$subj.r01.tcat+orig -epi_base 2      \
       -cost lpc+ZZ                                   \
       -volreg off -tshift off

# ================================== tlrc ==================================
# warp anatomy to standard space
@auto_tlrc -base MNI_avg152T1+tlrc -input tb6859_highres_ns+orig -no_ss \
    -suffix NONE

# ================================= volreg =================================
# align each dset to base volume, align to anat, warp to tlrc space

# verify that we have a +tlrc warp dataset
if ( ! -f tb6859_highres_ns+tlrc.HEAD ) then
    echo "** missing +tlrc warp dataset: tb6859_highres_ns+tlrc.HEAD" 
    exit
endif

# create an all-1 dataset to mask the extents of the warp
3dcalc -a pb00.$subj.r01.tcat+orig -expr 1 -prefix rm.epi.all1

# register and warp
foreach run ( $runs )
    # register each volume to the base
    3dvolreg -verbose -zpad 1 -base pb00.$subj.r01.tcat+orig'[2]' \
             -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run   \
             -cubic                                               \
             -1Dmatrix_save mat.r$run.vr.aff12.1D                 \
             pb00.$subj.r$run.tcat+orig

    # catenate volreg, epi2anat and tlrc transformations
    cat_matvec -ONELINE                                           \
               tb6859_highres_ns+tlrc::WARP_DATA -I               \
               tb6859_highres_al_junk_mat.aff12.1D -I             \
               mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

    # apply catenated xform : volreg, epi2anat and tlrc
    3dAllineate -base tb6859_highres_ns+tlrc                      \
                -input pb00.$subj.r$run.tcat+orig                 \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D           \
                -mast_dxyz 2                                      \
                -prefix rm.epi.nomask.r$run 

    # warp the all-1 dataset for extents masking 
    3dAllineate -base tb6859_highres_ns+tlrc                      \
                -input rm.epi.all1+orig                           \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D           \
                -mast_dxyz 2 -final NN -quiet                     \
                -prefix rm.epi.1.r$run 

    # make an extents intersection mask of this run
    3dTstat -min -prefix rm.epi.min.r$run rm.epi.1.r$run+tlrc
end

# make a single file of registration params
cat dfile.r*.1D > dfile_rall.1D

# ----------------------------------------
# create the extents mask: mask_epi_extents+tlrc
# (this is a mask of voxels that have valid data at every TR)
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r*.HEAD 
3dcalc -a rm.epi.mean+tlrc -expr 'step(a-0.999)' -prefix mask_epi_extents

# and apply the extents mask to the EPI data 
# (delete any time series with missing data)
foreach run ( $runs )
    3dcalc -a rm.epi.nomask.r$run+tlrc -b mask_epi_extents+tlrc   \
           -expr 'a*b' -prefix pb01.$subj.r$run.volreg
end

# create an anat_final dataset, aligned with stats
3dcopy tb6859_highres_ns+tlrc anat_final.$subj

# ================================== blur ==================================
# blur each volume of each run
foreach run ( $runs )
    3dmerge -1blur_fwhm 3.0 -doall -prefix pb02.$subj.r$run.blur \
            pb01.$subj.r$run.volreg+tlrc
end

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -dilate 1 -prefix rm.mask_r$run pb02.$subj.r$run.blur+tlrc
end

# get mean and compare it to 0 for taking 'union'
3dMean -datum short -prefix rm.mean rm.mask*.HEAD
3dcalc -a rm.mean+tlrc -expr 'ispositive(a-0)' -prefix full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+tlrc ----
#      (resampled from tlrc anat)
3dresample -master full_mask.$subj+tlrc -input tb6859_highres_ns+tlrc \
           -prefix rm.resam.anat

# convert to binary anat mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+tlrc  \
            -prefix mask_anat.$subj

# compute overlaps between anat and EPI masks
3dABoverlap -no_automask full_mask.$subj+tlrc mask_anat.$subj+tlrc    \
            |& tee out.mask_overlap.txt

# ---- create group anatomy mask, mask_group+tlrc ----
#      (resampled from tlrc base anat, MNI_avg152T1+tlrc)
3dresample -master full_mask.$subj+tlrc -prefix ./rm.resam.group      \
           -input /usr/local/packages/afni/linux_gcc33_64/MNI_avg152T1+tlrc

# convert to binary group mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.group+tlrc \
            -prefix mask_group

# ================================= scale ==================================
# scale each voxel time series to have a mean of 100
# (be sure no negatives creep in)
# (subject to a range of [0,200])
foreach run ( $runs )
    3dTstat -prefix rm.mean_r$run pb02.$subj.r$run.blur+tlrc
    3dcalc -a pb02.$subj.r$run.blur+tlrc -b rm.mean_r$run+tlrc \
           -c mask_epi_extents+tlrc                            \
           -expr 'c * min(200, a/b*100)*step(a)*step(b)'       \
           -prefix pb03.$subj.r$run.scale
end

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 4                                 \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 4                                 \
           -derivative -demean -write motion_deriv.1D

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile_rall.1D -set_nruns 4                                 \
    -show_censor_count -censor_prev_TR                                        \
    -censor_motion 0.3 motion_${subj}

# run the regression analysis
3dDeconvolve -input pb03.$subj.r*.scale+tlrc.HEAD                             \
    -censor motion_${subj}_censor.1D                                          \
    -polort 2                                                                 \
    -num_stimts 24                                                            \
    -stim_times 1 stimuli/tb6859_Body_run01.1D 'BLOCK5(12,1)'                 \
    -stim_label 1 Body_run01                                                  \
    -stim_times 2 stimuli/tb6859_Body_run02.1D 'BLOCK5(12,1)'                 \
    -stim_label 2 Body_run02                                                  \
    -stim_times 3 stimuli/tb6859_Body_run03.1D 'BLOCK5(12,1)'                 \
    -stim_label 3 Body_run03                                                  \
    -stim_times 4 stimuli/tb6859_Body_run04.1D 'BLOCK5(12,1)'                 \
    -stim_label 4 Body_run04                                                  \
    -stim_times 5 stimuli/tb6859_Face_run01.1D 'BLOCK5(12,1)'                 \
    -stim_label 5 Face_run01                                                  \
    -stim_times 6 stimuli/tb6859_Face_run02.1D 'BLOCK5(12,1)'                 \
    -stim_label 6 Face_run02                                                  \
    -stim_times 7 stimuli/tb6859_Face_run03.1D 'BLOCK5(12,1)'                 \
    -stim_label 7 Face_run03                                                  \
    -stim_times 8 stimuli/tb6859_Face_run04.1D 'BLOCK5(12,1)'                 \
    -stim_label 8 Face_run04                                                  \
    -stim_times 9 stimuli/tb6859_House_run01.1D 'BLOCK5(12,1)'                \
    -stim_label 9 House_run01                                                 \
    -stim_times 10 stimuli/tb6859_House_run02.1D 'BLOCK5(12,1)'               \
    -stim_label 10 House_run02                                                \
    -stim_times 11 stimuli/tb6859_House_run03.1D 'BLOCK5(12,1)'               \
    -stim_label 11 House_run03                                                \
    -stim_times 12 stimuli/tb6859_House_run04.1D 'BLOCK5(12,1)'               \
    -stim_label 12 House_run04                                                \
    -stim_file 13 motion_demean.1D'[0]' -stim_base 13 -stim_label 13 roll_01  \
    -stim_file 14 motion_demean.1D'[1]' -stim_base 14 -stim_label 14 pitch_01 \
    -stim_file 15 motion_demean.1D'[2]' -stim_base 15 -stim_label 15 yaw_01   \
    -stim_file 16 motion_demean.1D'[3]' -stim_base 16 -stim_label 16 dS_01    \
    -stim_file 17 motion_demean.1D'[4]' -stim_base 17 -stim_label 17 dL_01    \
    -stim_file 18 motion_demean.1D'[5]' -stim_base 18 -stim_label 18 dP_01    \
    -stim_file 19 motion_deriv.1D'[0]' -stim_base 19 -stim_label 19 roll_02   \
    -stim_file 20 motion_deriv.1D'[1]' -stim_base 20 -stim_label 20 pitch_02  \
    -stim_file 21 motion_deriv.1D'[2]' -stim_base 21 -stim_label 21 yaw_02    \
    -stim_file 22 motion_deriv.1D'[3]' -stim_base 22 -stim_label 22 dS_02     \
    -stim_file 23 motion_deriv.1D'[4]' -stim_base 23 -stim_label 23 dL_02     \
    -stim_file 24 motion_deriv.1D'[5]' -stim_base 24 -stim_label 24 dP_02     \
    -jobs 4                                                                   \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                                   \
    -x1D_uncensored X.nocensor.xmat.1D                                        \
    -fitts fitts.$subj                                                        \
    -errts errts.${subj}                                                      \
    -bucket stats.$subj


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# display any large pariwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb03.$subj.r*.scale+tlrc.HEAD

# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj+tlrc
3dTstat -stdev -prefix rm.noise.all errts.${subj}+tlrc
3dcalc -a rm.signal.all+tlrc                                                  \
       -b rm.noise.all+tlrc                                                   \
       -c full_mask.$subj+tlrc                                                \
       -expr 'c*a/b' -prefix TSNR.$subj 

# compute and store GCOR (global correlation average)
# - compute as sum of squares of global mean of unit errts
3dTnorm -prefix rm.errts.unit errts.${subj}+tlrc
3dmaskave -quiet -mask full_mask.$subj+tlrc rm.errts.unit+tlrc >              \
    gmean.errts.unit.1D
3dTstat -sos -prefix - gmean.errts.unit.1D\' > out.gcor.1D
echo "-- GCOR = `cat out.gcor.1D`"

# create ideal files for fixed response stim types
1dcat X.nocensor.xmat.1D'[12]' > ideal_Body_run01.1D
1dcat X.nocensor.xmat.1D'[13]' > ideal_Body_run02.1D
1dcat X.nocensor.xmat.1D'[14]' > ideal_Body_run03.1D
1dcat X.nocensor.xmat.1D'[15]' > ideal_Body_run04.1D
1dcat X.nocensor.xmat.1D'[16]' > ideal_Face_run01.1D
1dcat X.nocensor.xmat.1D'[17]' > ideal_Face_run02.1D
1dcat X.nocensor.xmat.1D'[18]' > ideal_Face_run03.1D
1dcat X.nocensor.xmat.1D'[19]' > ideal_Face_run04.1D
1dcat X.nocensor.xmat.1D'[20]' > ideal_House_run01.1D
1dcat X.nocensor.xmat.1D'[21]' > ideal_House_run02.1D
1dcat X.nocensor.xmat.1D'[22]' > ideal_House_run03.1D
1dcat X.nocensor.xmat.1D'[23]' > ideal_House_run04.1D

# compute sum of non-baseline regressors from the X-matrix
# (use 1d_tool.py to get list of regressor colums)
set reg_cols = `1d_tool.py -infile X.nocensor.xmat.1D -show_indices_interest`
3dTstat -sum -prefix sum_ideal.1D X.nocensor.xmat.1D"[$reg_cols]"

# also, create a stimulus-only X-matrix, for easy review
1dcat X.nocensor.xmat.1D"[$reg_cols]" > X.stim.xmat.1D

# ============================ blur estimation =============================
# compute blur estimates
touch blur_est.$subj.1D   # start with empty file

# -- estimate blur for each run in epits --
touch blur.epits.1D

set b0 = 0     # first index for current run
set b1 = -1    # will be last index for current run
foreach reps ( $tr_counts )
    @ b1 += $reps  # last index for current run
    3dFWHMx -detrend -mask full_mask.$subj+tlrc                               \
        all_runs.$subj+tlrc"[$b0..$b1]" >> blur.epits.1D
    @ b0 += $reps  # first index for next run
end

# compute average blur and append
set blurs = ( `3dTstat -mean -prefix - blur.epits.1D\'` )
echo average epits blurs: $blurs
echo "$blurs   # epits blur estimates" >> blur_est.$subj.1D

# -- estimate blur for each run in errts --
touch blur.errts.1D

set b0 = 0     # first index for current run
set b1 = -1    # will be last index for current run
foreach reps ( $tr_counts )
    @ b1 += $reps  # last index for current run
    3dFWHMx -detrend -mask full_mask.$subj+tlrc                               \
        errts.${subj}+tlrc"[$b0..$b1]" >> blur.errts.1D
    @ b0 += $reps  # first index for next run
end

# compute average blur and append
set blurs = ( `3dTstat -mean -prefix - blur.errts.1D\'` )
echo average errts blurs: $blurs
echo "$blurs   # errts blur estimates" >> blur_est.$subj.1D


# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj \
    -dsets pb00.$subj.r*.tcat+orig.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -mot_limit 0.3 -exit0

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -f rm.*

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) ./@ss_review_basic |& tee out.ss_review.$subj.txt

# return to parent directory
cd ..




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id fb1_01 -script proc.fb1_01 -scr_overwrite -blocks        \
#     align tlrc volreg blur mask scale regress -copy_anat                       \
#     /mnt/nfs/psych/facebody01/data/nifti/tb6859/tb6859_highres.nii.gz          \
#     -tcat_remove_first_trs 0 -dsets                                            \
#     /mnt/nfs/psych/facebody01/data/nifti/tb6859/tb6859_FaceBody01_run01.nii.gz \
#     /mnt/nfs/psych/facebody01/data/nifti/tb6859/tb6859_FaceBody01_run02.nii.gz \
#     /mnt/nfs/psych/facebody01/data/nifti/tb6859/tb6859_FaceBody01_run03.nii.gz \
#     /mnt/nfs/psych/facebody01/data/nifti/tb6859/tb6859_FaceBody01_run04.nii.gz \
#     -align_opts_aea -cost lpc+ZZ -tlrc_base MNI_avg152T1+tlrc                  \
#     -volreg_align_to third -volreg_align_e2a -volreg_tlrc_warp -blur_size      \
#     3.0 -regress_stim_times                                                    \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Body_run01.1D  \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Body_run02.1D  \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Body_run03.1D  \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Body_run04.1D  \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Face_run01.1D  \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Face_run02.1D  \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Face_run03.1D  \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_Face_run04.1D  \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_House_run01.1D \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_House_run02.1D \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_House_run03.1D \
#     /mnt/nfs/psych/facebody01/command/timing/afni/tb6859/tb6859_House_run04.1D \
#     -regress_stim_labels Body_run01 Body_run02 Body_run03 Body_run04           \
#     Face_run01 Face_run02 Face_run03 Face_run04 House_run01 House_run02        \
#     House_run03 House_run04 -regress_basis 'BLOCK5(12,1)'                      \
#     -regress_censor_motion 0.3 -regress_apply_mot_types demean deriv           \
#     -regress_opts_3dD -jobs 4 -regress_make_ideal_sum sum_ideal.1D             \
#     -regress_est_blur_epits -regress_est_blur_errts -regress_run_clustsim no
